<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Interactive Instrument Page</title>
</head>

  <style>
    /* Base Reset & Animated Background */
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: sans-serif;
    }

    body {
      background: linear-gradient(-45deg, #1a2a6c, #b21f1f, #fdbb2d, #1a2a6c);
      background-size: 400% 400%;
      animation: waveGradient 20s ease-in-out infinite;
      color: white;
    }

    @keyframes waveGradient {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    /* Flex container for left/right panels */
    .container {
      display: flex;
      flex-direction: row;
      width: 100%;
      height: 100vh;
    }

    /* Left panel (info) */
.left-panel {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  height: 100vh;
  padding: 30px;
  box-sizing: border-box;
  background: rgba(0, 0, 0, 0.3);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border-right: 1px solid rgba(255, 255, 255, 0.1);
  overflow: hidden; /* remove scrolling */
}

    /* Right panel (3D model) */
    .right-panel {
      width: 60%;
      min-width: 500px;
      flex-shrink: 0;
      position: relative;
      background: rgba(0, 0, 0, 0.2);
      box-sizing: border-box;
      padding: 10px;
      display: flex;
      flex-direction: column;
    }

    /* Sketchfab embed styling */
    .sketchfab-embed-wrapper {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
    }

    .sketchfab-embed-wrapper iframe {
      flex-grow: 1;
      width: 100%;
      border: none;
      background: #000;
    }

    .sketchfab-embed-wrapper p {
      font-size: 13px;
      font-weight: normal;
      margin: 5px 0 0 0;
      color: #4A4A4A;
      text-align: center;
    }

    .sketchfab-embed-wrapper p a {
      font-weight: bold;
      color: #1CAAD9;
      text-decoration: none;
    }

    .sketchfab-embed-wrapper p a:hover {
      text-decoration: underline;
    }

    /* Tabs */
    .tabs {
      flex-grow: 1;
    }

    .tab-buttons {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }

    .tab-buttons button {
      flex: 1;
      padding: 10px;
      background: rgba(255, 255, 255, 0.1);
      border: none;
      cursor: pointer;
      color: white;
      border-radius: 4px;
      transition: background 0.3s;
    }

    .tab-buttons button.active,
    .tab-buttons button:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .tab-content {
      background: rgba(0, 0, 0, 0.4);
      padding: 15px;
      border-radius: 5px;
      min-height: 200px;
      overflow-y: auto;
    }

    .tab-content img {
      width: 100%;
      border-radius: 4px;
      margin-top: 10px;
    }

    /* Buttons */
    button {
      padding: 12px;
      background-color: #ffffff22;
      border: none;
      color: white;
      font-weight: bold;
      cursor: pointer;
      border-radius: 4px;
      transition: background 0.3s;
      width: 100%;
      margin-top: 10px;
    }

    button:hover {
      background-color: #ffffff44;
    }

    #spotifyEmbedContainer {
      width: 100%;
      height: 150px;
      border-radius: 12px;
      margin-bottom: 10px;
      display: none;
    }

  .right-panel {
    width: 50%;              /* panel takes 50% of the screen width */
    min-width: 300px;        /* won’t shrink below 300px */
    max-width: 1000px;        /* won’t grow above 600px */
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
}

.right-panel img {
    width: 100%;             /* image fills the panel width */
    height: auto;            /* maintain aspect ratio */
    max-height: 80vh;        /* max 80% of viewport height */
    object-fit: contain;       /* fills panel nicely, crops if needed */
    border-radius: 8px;
}

  </style>

<body>
  <!-- Floating music notes animation -->
  <div id="noteContainer"></div>

  <div class="container">
    <div class="left-panel">
      <div class="tabs">
        <div class="tab-buttons">
          <button class="active" onclick="showTab('overview')">Overview</button>
        </div>

        <div id="overview" class="tab-content">
          <!-- Instrument name will appear here -->
          <h2 id="instrumentTitle" style="text-transform: capitalize;"></h2>

          <!-- Dynamic overview text -->
          <p id="overviewText">Loading instrument overview...</p>

    
        </div>
      </div>

      <div id="spotifyEmbedContainer" style="display:none;">
        <iframe
          src="https://open.spotify.com/embed/track/1I5OFCYZMqcHcAbLeH46Ew?utm_source=generator" 
          width="100%" frameborder="0" 
          allowfullscreen="" 
          allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
          loading="lazy">
        </iframe>
      </div>

      <button id="listenBtn">Hear What I Sound Like</button>
      <button id="tryAnotherBtn">Try Another Instrument</button>
    </div>

    <!-- Right panel intentionally left blank -->
<div class="right-panel"> 
  <img id="instrumentImage" 
       src="/img/default_instrument.png" 
       alt="Instrument image" 
       style="max-width: 100%; height: 800px; border-radius: 8px;" />
</div>


  <!-- ============================== -->
  <!-- JavaScript Section             -->
  <!-- ============================== -->
  <script>
    // ----- Tab display -----
    function showTab(tabId) {
      const contents = document.querySelectorAll('.tab-content');
      contents.forEach(content => content.style.display = 'none');

      const buttons = document.querySelectorAll('.tab-buttons button');
      buttons.forEach(btn => btn.classList.remove('active'));

      document.getElementById(tabId).style.display = 'block';

      const clickedButton = Array.from(buttons).find(btn => 
        btn.getAttribute('onclick')?.includes(tabId)
      );
      if (clickedButton) clickedButton.classList.add('active');
    }

    // ----- "Try Another" button -----
    document.getElementById('tryAnotherBtn').addEventListener('click', () => {
      window.location.href = '/recognition';
    });

    // ----- "Listen" button -----
    const listenBtn = document.getElementById('listenBtn');
    listenBtn.addEventListener('click', () => {
      const container = document.getElementById('spotifyEmbedContainer');
      container.style.display = 'block';
      container.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

      const noteContainer = document.getElementById('noteContainer');
      const spawnNotes = setInterval(() => {
        const note = document.createElement('div');
        note.className = 'note';
        const symbols = ['&#9835;', '&#9833;', '&#9839;', '&#119070;', '&#9834;'];
        note.innerHTML = symbols[Math.floor(Math.random() * symbols.length)];
        note.style.top = Math.random() * 80 + '%';
        noteContainer.appendChild(note);
        setTimeout(() => note.remove(), 9000);
      }, 300);

      setTimeout(() => clearInterval(spawnNotes), 10000);
    });

    // ==============================
    // Dynamic Instrument Content
    // ==============================
    const params = new URLSearchParams(window.location.search);
    const instrumentName = params.get("instrument");

    if (instrumentName) {
      document.title = `Learn More: ${instrumentName}`;
      document.getElementById("instrumentTitle").textContent = instrumentName;
    }

// ----- Fetch image from Wikimedia Commons -----
async function fetchInstrumentImage(instrument) {
  const url = `https://commons.wikimedia.org/w/api.php?action=query&format=json&origin=*&prop=imageinfo&generator=search&gsrsearch=file:${encodeURIComponent(instrument)}&gsrlimit=1&iiprop=url`;

  try {
    const res = await fetch(url);
    const data = await res.json();

    if (data.query && data.query.pages) {
      const pages = Object.values(data.query.pages);
      const imageUrl = pages[0]?.imageinfo?.[0]?.url;
      return imageUrl || "/img/default_instrument.png";
    } else {
      return "/img/default_instrument.png";
    }
  } catch (err) {
    console.error("Error fetching Wikimedia image:", err);
    return "/img/default_instrument.png";
  }
}

    // ----- Fetch overview from Gemini (via backend) -----
    async function fetchGeminiOverview(instrument) {
      const res = await fetch(`/api/overview?instrument=${encodeURIComponent(instrument)}`);
      const data = await res.json();
      return data.overview || "No overview available for this instrument.";
    }

    // ----- Load content -----
    (async () => {
      if (!instrumentName) return;
      try {
        const [imgUrl, overview] = await Promise.all([
          fetchInstrumentImage(instrumentName),
          fetchGeminiOverview(instrumentName)
        ]);
        document.getElementById("instrumentImage").src = imgUrl;
        document.getElementById("overviewText").textContent = overview;
      } catch (error) {
        console.error("Error fetching content:", error);
        document.getElementById("overviewText").textContent = "Failed to load instrument information.";
      }
    })();
  </script>
</body>
</html>
